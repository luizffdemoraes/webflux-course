plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'br.com.luizffdemoraes'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.projectlombok:lombok'
	implementation "org.projectlombok:lombok-mapstruct-binding:0.2.0"

	// MapStruct
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'

	//Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.2.0'
}

tasks.test {
	useJUnitPlatform()
	exclude '**/*Data.*'
}

jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}

	afterEvaluate {
		// Exclua a classe UserMapper do relat√≥rio de cobertura
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: '**/*UserMapper*.*')
		})

		println "JaCoCo - Class Directories: ${classDirectories}"
		println "JaCoCo - Excluded Classes: ${classDirectories.files.collect { fileTree(dir: it, exclude: '**/*UserMapper*.*') }}"
	}
}

jacoco {
	toolVersion = "0.8.9"
	reportsDirectory = layout.buildDirectory.dir("customJacocoReportDir")
}